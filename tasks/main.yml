---
- name: Ensure sudo and coreutils packages are installed
  ansible.builtin.apt:
    name: "{{ __admin_user__role_dependencies }}"
    state: present
    update_cache: true
    cache_valid_time: "{{ apt_cache_valid_time }}"

- name: Ensure admin group exists
  ansible.builtin.group:
    name: "{{ admin_user__group }}"
    state: present

- name: Ensure admin user exists
  ansible.builtin.user:
    name: "{{ admin_user__user }}"
    group: "{{ admin_user__group }}"
    shell: /bin/bash
    state: present

- name: Ensure admin user has escalation privileges
  ansible.builtin.lineinfile:
    state: present
    path: /etc/sudoers.d/{{ admin_user__user }}
    validate: /usr/sbin/visudo -cf %s
    regexp: ^{{ admin_user__user }} ALL=
    line: "{{ admin_user__user }} ALL=(ALL) NOPASSWD:ALL"
    create: true
    owner: root
    group: root
    mode: "644"

- name: Ensure admin user .ssh directory exists
  ansible.builtin.file:
    path: /home/{{ admin_user__user }}/.ssh
    state: directory
    owner: "{{ admin_user__user }}"
    group: "{{ admin_user__group }}"
    mode: "700"

- name: Generate the admin user authorized_keys file
  ansible.builtin.template:
    src: authorized_keys.j2
    dest: /home/{{ admin_user__user }}/.ssh/authorized_keys
    owner: "{{ admin_user__user }}"
    group: "{{ admin_user__group }}"
    mode: "600"
    backup: true

- name: Check if the hushlogin file exists for the admin user
  ansible.builtin.stat:
    path: "{{ __admin_user__hushlogin_file }}"
  register: admin_user__hushlogin_file

- name: Ensure the hushlogin file exists for the admin user
  ansible.builtin.file:
    path: "{{ __admin_user__hushlogin_file }}"
    state: touch
    owner: "{{ admin_user__user }}"
    group: "{{ admin_user__group }}"
    mode: "644"
  when: not admin_user__hushlogin_file.stat.exists

- name: Ensure admin's user .bashrc and .vimrc files are configured
  vars:
    __bashrc_file: /home/{{ admin_user__user }}/.bashrc
    __vimrc_file: /home/{{ admin_user__user }}/.vimrc
    __vimrc_file_owner: "{{ admin_user__user }}"
    __vimrc_file_group: "{{ admin_user__group }}"
  ansible.builtin.import_tasks: configure-dotfiles.yml

- name: Ensure root user .bashrc and .vimrc files are configured
  vars:
    __bashrc_file: /root/.bashrc
    __vimrc_file: /root/.vimrc
    __vimrc_file_owner: root
    __vimrc_file_group: root
  ansible.builtin.import_tasks: configure-dotfiles.yml
  when: admin_user__apply_bashrc_settings_to_root_user | default(true) | bool
